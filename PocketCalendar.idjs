//An InDesign UXPScript

const fs = require('fs');
main();



/****  main() *****/

function main(){
    //Make certain that user interaction (display of dialogs, etc.) is turned on.
    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;
    
    var options = {
        dialog: {labelWidth: 70},
        locale: 'en-US', /* default */
        weekBeginsAtMonday: true,
        weekDayShrotness: "short",
        year: 2023,
        year_table: {
            border: 4,
            colsW: { week : 55.5, mo: "252pt"},
            rowsH: { moName: "48pt", mo: "236pt", mid:"156pt"},
            order: {
                cols:["week", "mo", "mo", "mo", "week"],
                rows: ["moName", "mo", "moName", "mo", "mid", "moName", "mo", "moName", "mo"]
            }
        },
    };

    displayDialog(options);
}

/****  End of main() *****/

/****  Dialog *****/

function attachSideBySide(attr){
    let {leftCol, rightCol, labelW, inp: {label,  inputType, inputParam}} = {...attr};
    leftCol.staticTexts.add({staticLabel: label, minWidth: labelW});
    return rightCol[inputType].add(inputParam);
}
function attachInputSet(attr){
    let {pa, label, labelW, myInputs} = {...attr};

    let paCol = pa.dialogColumns.add();
    let row = paCol.dialogRows.add();  
    let leftCol = row.dialogColumns.add();
    let rightCol = row.dialogColumns.add();

    attachSideBySide({ leftCol, rightCol, labelW, inp: { label, inputType: "staticTexts", inputParam: {staticLabel:""}}});
    return myInputs.map(inp => attachSideBySide({ leftCol, rightCol, labelW, inp}));
}

function readJsonFile(fileName){
    const stats = fs.lstatSync(fileName);
    if(!stats.isFile()){ return []; }
    let jsonFileContent = fs.readFileSync(fileName, {encoding: "utf-8"});
    let meData = JSON.parse(jsonFileContent);
    return meData;
}
function getHolidaysFormulaFiles(){
    const paths = fs.readdirSync("holidays_formula");
    console.log(paths);
}

function displayDialog(options){
    var myDialog = app.dialogs.add({name:"Pocket Calendar"});

    let localeKeys = readJsonFile("locale_InDesign_keys.json");
    let localeData = readJsonFile("locale_key_name_dateFormat.json");
    let hdays = getHolidaysFormula();
    //getHolidaysFormulaFiles();

    let myLanguages = [];
    let myLocales = [];
    for(let i=0; i < localeKeys.length; i++){
        let locKey = localeKeys[i].replace('_','-');
        if (localeData[locKey]){
            myLanguages.push(localeData[locKey].name);
            myLocales.push(locKey);
        } else {
            alert("Not familiar with " + locKey);
        }
    }

    let mainCol = myDialog.dialogColumns.add();
    let borderPanA = mainCol.borderPanels.add();
    let borderPanB = mainCol.borderPanels.add();
    let borderPanC = mainCol.borderPanels.add();

    let mainInps = attachInputSet({pa: borderPanA, label: "YEAR AND LANGUAGE:", labelW: options.dialog.labelWidth, 
        myInputs: [ 
            {label:"Year:", inputType: "integerEditboxes", inputParam: {editValue: (new Date()).getFullYear()}},
            {label:"Language:", inputType: "dropdowns", inputParam: {stringList: myLanguages, selectedIndex: 3}},
            {label: "", inputType: "checkboxControls", inputParam: {checkedState:true, staticLabel: "Week start on Monday"}},
        ]});

    
    let inps2 = attachInputSet({pa: borderPanB, label: "HOLIDAYS", labelW: options.dialog.labelWidth, 
        myInputs: [ 
            {label:"Country:", inputType: "dropdowns", inputParam: {stringList: ["Federal, USA", "Custom"], selectedIndex: 0}},
            {label:"Number of days per year:", inputType: "integerEditboxes", inputParam: {editValue: hdays.length}},
            {label: "Open holidays dialog", inputType: "checkboxControls", inputParam: {checkedState: false, staticLabel: ""}},
        ]});

    let inps = attachInputSet({pa: borderPanC, label: "APPEARANCE", labelW: options.dialog.labelWidth, 
        myInputs: [ 
            {label:"Border:", inputType: "measurementEditboxes", 
                inputParam: {editValue: options.year_table.border, editUnits: MeasurementUnits.points}},
            {label:"Week days:", inputType: "dropdowns", inputParam: {stringList: ["narrow", "short", "long"], selectedIndex: 1}},
        ]});

    var myResult = myDialog.show();
    if(myResult == true){
        // make an independent copy of options and modify it
        // validate all values
        options.locale = myLocales[mainInps[1].selectedIndex];
        options.weekBeginsAtMonday = mainInps[2].checkedState;
        options.year = mainInps[0].editValue;
        options.year_table.border = inps[0].editValue;
        let numOfHolidays = inps2[1].editValue;
        if(!inps2[2].checkedState){
            myDialog.destroy();
            generateCalendar( options);
        }else if(inps2[2].checkedState){
            myDialog.destroy();
            displayHolidaysDialog(options, hdays, numOfHolidays);         
        } else {
            myDialog.destroy();
            alert("Failed validation");
        }
    }
    else{
        myDialog.destroy();
    }
}

function displayHolidaysDialog(options, hdFormula, num){
    var myDialog = app.dialogs.add({name:"Calendar Holidays"});

    let mainCol = myDialog.dialogColumns.add();
    let borderPanA = mainCol.borderPanels.add();
    let paCol = borderPanA.dialogColumns.add();
    let row = paCol.dialogRows.add();

    let monthNameList = getMonthNames(options);
    let weekDaysList = getWeekDayNames(options);

    let holidayLines = [];
    for( let i=0; i<num; i++){
        holidayLines.push(
            { inputType: "enablingGroups", inputParam: {checkedState: true, staticLabel: i + ". " + hdFormula[i].name},
                inps: [
                    { inputType: "textEditboxes", inputParam: {editContents: hdFormula[i].name, minWidth: 200}},
                    { inputType: "enablingGroups", inputParam: {checkedState: hdFormula[i].fixed, staticLabel: "fixed"}, 
                        inps: [
                            { inputType: "dropdowns", inputParam: {stringList: monthNameList, selectedIndex: hdFormula[i].fixed ? hdFormula[i].mo : 0}},
                            { inputType: "integerEditboxes", inputParam: {editValue: hdFormula[i].fixed ? hdFormula[i].date : 1}, staticLabel: "date" }
                        ]
                    },
                    { inputType: "enablingGroups", inputParam: {checkedState: !hdFormula[i].fixed, staticLabel: "not fixed"}, 
                        inps: [
                            { inputType: "dropdowns", inputParam: {stringList: ["1 in month","2 in month","3 in month","4 in month","last in month"], selectedIndex: hdFormula[i].fixed ? 0: hdFormula[i].num}},
                            { inputType: "dropdowns", inputParam: {stringList: weekDaysList, selectedIndex: hdFormula[i].fixed ? 1: hdFormula[i].weekDay - hdFormula[i].fixed}},
                        ]
                    },
                ]
            });
    }

    function addInpCols(paRow, inpLen){
        let cols = [];
        for(let i=0; i < inpLen; i++){
            cols.push(paRow.dialogColumns.add());
        }
        return cols;
    }

    function attachInputRow(ind, cols, rowInps){
        let inpElms = [];
        let inps = Array.isArray(rowInps) ? rowInps : [rowInps];
        console.log(">>> inps LEN " + inps.length + "<<<", ">>>" + cols.length + "<<<"/*, JSON.stringify( inps )*/);
        console.log(cols[0].toSource());

        for(let j=0; j < inps.length; j++){
            console.log(j, ">> inps[j] TYPE " + inps[j].inputType +"<<", cols[j].toSource());
            inpElms.push(cols[j][inps[j].inputType].add(inps[j].inputParam));
            if(inps[j].inps && Array.isArray(inps[j].inps)){
                let colsR = addInpCols(inpElms[inpElms.length - 1], inps[j].inps.length);
                let innerInpRows = attachInputRow(0, colsR, inps[j].inps);
                inpElms.concat(innerInpRows);
            }
        }
        return inpElms;
    }

    let cols = addInpCols(row, holidayLines.length);
    let inpRows = holidayLines.map((inps, ind) => attachInputRow(ind, cols, inps));

    var myResult = myDialog.show();
    if(myResult == true){
        myDialog.destroy();
        generateCalendar( options);
    }
}
/****  End of dialog *****/

function generateCalendar( options){

    var myDocument = app.documents.add();
    myDocument.name = "Pocket Calendar " + options.year;
    myDocument.viewPreferences.horizontalMeasurementUnits = MeasurementUnits.POINTS;
    myDocument.viewPreferences.verticalMeasurementUnits = MeasurementUnits.POINTS;
    myDocument.documentPreferences.properties = {pageWidth: 1000, pageHeight: 1800};
    myDocument.colors.add({name:"Red", model: ColorModel.process, colorValue:[0,90,53,0]});

    var dayFontStyle = myDocument.paragraphStyles.add({
        name:"Day Font",
        appliedFont: "Neue Haas Unica W1G",
        fontStyle: "Medium",
        pointSize: 31, /* leading 36 */
        justification: Justification.RIGHT_ALIGN,
    });

    var weekFontStyle = myDocument.paragraphStyles.add({
        name:"Week Font",
        appliedFont: "Neue Haas Unica W1G",
        fontStyle: "Bold",
        pointSize: 31,
        justification: Justification.LEFT_ALIGN,
    });

    var monthFontStyle = myDocument.paragraphStyles.add({
        name:"Month Font",
        appliedFont: "Neue Haas Unica W1G",
        fontStyle: "Bold",
        pointSize: 30,
        kerningMethod: "Optical",
        tracking: 50,
        justification: Justification.CENTER_ALIGN,
    });

    var yearFontStyle = myDocument.paragraphStyles.add({
        name:"Year Font",
        appliedFont: "Abril fatface", //"Blenny" //"Gravitas One",
        //fontStyle: "Black",
        pointSize: 155, // 162,
        leading: 131,
        kerningMethod: "Optical",
        tracking: 0, // -70,
        fillColor: myDocument.colors.item("Red"),
        justification: Justification.LEFT_ALIGN,
    });

    var dayHighlightFontStyle = myDocument.paragraphStyles.add({
        name:"Day Red Font",
        basedOn: dayFontStyle,
        fillColor: myDocument.colors.item("Red"),
    });

    var dayCellStyle = myDocument.cellStyles.add({
        name:"Day Cell",
        appliedParagraphStyle: dayFontStyle,
        textTopInset: "1px",
        textRightInset: "4pt",
        textBottomInset: "7pt",
        textLeftInset: "5pt",
        verticalJustification: VerticalJustification.CENTER_ALIGN
    });

    var highlightDayCellStyle = myDocument.cellStyles.add({
        name:"Highlight Day Cell",
        appliedParagraphStyle: dayHighlightFontStyle,
    });

    var weekDayCellStyle = myDocument.cellStyles.add({
        name:"Week Day Names Cell",
        basedOn: dayCellStyle,
        appliedParagraphStyle: weekFontStyle,
        textTopInset: "4px",
        textBottomInset: "4pt",
    });

    var yearCellStyle = myDocument.cellStyles.add({
        name:"Year Cell",
        basedOn: dayCellStyle,
        appliedParagraphStyle: monthFontStyle,
        textTopInset: 0,
        textRightInset: 0,
        textBottomInset: 0,
    });

    var monthNameCellStyle = myDocument.cellStyles.add({
        name:"Month Name Cell",
        basedOn: yearCellStyle,
        appliedParagraphStyle: monthFontStyle,
    });

    var monthCellStyle = myDocument.cellStyles.add({
        name:"Month Cell",
        basedOn: yearCellStyle,
        textTopInset: "8px",
    });

    var middleCellStyle = myDocument.cellStyles.add({
        name:"Middle Cell",
        basedOn: yearCellStyle,
        appliedParagraphStyle: yearFontStyle,
        firstBaselineOffset: FirstBaseline.LEADING_OFFSET,
        verticalJustification: VerticalJustification.JUSTIFY_ALIGN,
        textLeftInset: "16pt",
    });

    var weekCellStyle = myDocument.cellStyles.add({
        name:"Week Cell",
        basedOn: yearCellStyle,
    });

    var moTableStyle = myDocument.tableStyles.add({
        name:"Month Table Style",
        bodyRegionCellStyle: dayCellStyle,
        spaceBefore: 0,
        spaceAfter: 0,
        leftBorderStrokeWeight: 0,
        topBorderStrokeWeight: 0,
        rightBorderStrokeWeight: 0,
        bottomBorderStrokeWeight: 0,
        startColumnStrokeCount: 1,
        endColumnStrokeCount: 1,
        startRowStrokeRow: 1,
        endRowStrokeCount: 1,
        startColumnStrokeWeight:0,
        endColumnStrokeWeight:0,
        startRowStrokeWeight:0,
        endRowStrokeWeight:0,
    });

    var weekTableStyle = myDocument.tableStyles.add({
        name:"Week Table Style",
        basedOn: moTableStyle,
        bodyRegionCellStyle: weekDayCellStyle,
    });

    let bw = options.year_table.border;
    var yearTableStyle = myDocument.tableStyles.add({
        name:"Year Table Style",
        bodyRegionCellStyle: yearCellStyle,
        spaceBefore: 0,
        spaceAfter: 0,
        leftBorderStrokeWeight: bw,
        topBorderStrokeWeight: bw,
        rightBorderStrokeWeight: bw,
        bottomBorderStrokeWeight: bw,
        startColumnStrokeCount: 1,
        endColumnStrokeCount: 1,
        startRowStrokeRow: 1,
        endRowStrokeCount: 1,
        startColumnStrokeWeight: bw,
        endColumnStrokeWeight: bw, 
        startRowStrokeWeight: bw, 
        endRowStrokeWeight: bw,
    });

    /***** Structural part (mostly) *****/
    var myTextFrame = myDocument.pages.item(0).textFrames.add({geometricBounds: ["36pt", "36pt", "1400pt", "940pt"]});
    myTextFrame.textFramePreferences.autoSizingType = AutoSizingTypeEnum.HEIGHT_AND_WIDTH;

    var yearTable = myTextFrame.insertionPoints.item(-1).tables.add({
        appliedTableStyle: yearTableStyle,
        bodyRowCount : 9,
        columnCount : 5
    });

    let weekList = getWeekDayNames(options);
    let weekW = measureColMinW(weekTableStyle, weekList, yearTable.cells.item(0));
    options.year_table.colsW.week = (options.year_table.colsW.week < weekW) ? weekW : options.year_table.colsW.week;


    let numW = measureColMinW(moTableStyle, ['1','2','3','4','5','6','7','8','9','0'], yearTable.cells.item(0));
    let num2W = measureColMinW(moTableStyle, ['24', '30'], yearTable.cells.item(0));
    options.daysNarrowCol = numW;
    options.daysCol = num2W;

    [0,4].forEach((col)=>{
        [1,3,6,8].forEach((row)=>{
            let weekCell = yearTable.columns.item(col).cells.item(row);
            weekCell.appliedCellStyle = weekCellStyle;
            let weekTbl = weekCell.tables.add({
                appliedTableStyle: weekTableStyle,
                bodyRowCount : 7,
                columnCount : 1,
                contents: weekList,
                width: weekW,
            });
            weekTbl.rows.item(6).cells.item(0).texts.item(0).fillColor = myDocument.colors.item("Red");
        });
    });

    var d= new Date(options.year, 0, 1);
    const holidays = federalHolidaysYear(options.year);

    while (d.getFullYear() == options.year) {
        let mo = d.getMonth();
        let moName = d.toLocaleString(options.locale, { month: 'long' });

        let yearTableCol = mo%3 + 1;
        let yearTableRow = Math.floor(mo/3);
        yearTableRow = (yearTableRow < 2) ? 2*yearTableRow : 2*yearTableRow + 1;

        let firstDayShift = d.getDay() - 1;
        let days = [];
        while (mo==d.getMonth()) {
            let dt = d.getDate();
            days[d.getDay()+ 7*Math.floor((dt+firstDayShift)/7)] = dt;
            d.setDate(dt + 1);
        }

        if( options.weekBeginsAtMonday ){
            days.shift();
            if(2 === days[0]){
                days = [0,0,0,0,0,0,1, ...days];
                firstDayShift = 6;
            }
        }

        let cols = Math.ceil(days.length/7);
        let daysStr = [];
        for(let i=0; i < 7*cols; i++) {
            let ind = cols*(i%7) + Math.floor(i/7);
            daysStr[ind] = days[i] ? days[i].toString() : '';
        }

        let monthNameCell = yearTable.rows.item(yearTableRow).cells.item(yearTableCol);
        monthNameCell.contents = moName.toLocaleUpperCase();
        monthNameCell.appliedCellStyle = monthNameCellStyle;

        // initial column will be even portion from table width
        // each time you decrease column width it will decrease table width
        // => start with maximum width for each column
        let tblW = ((cols<6)? 5*options.daysCol : 6* options.daysCol);

        let monthCell = yearTable.rows.item(yearTableRow +1).cells.item(yearTableCol);
        monthCell.appliedCellStyle = monthCellStyle;
        let moTable = monthCell.tables.add({
            appliedTableStyle: moTableStyle,
            bodyRowCount : 7,
            columnCount : cols,
            contents : daysStr,
            width: tblW,
        });

        moTable.columns.item(0).width = options.daysNarrowCol;
        if(firstDayShift > 4){
            moTable.columns.item(1).width = options.daysNarrowCol;
        }else{
            moTable.columns.item(1).width = options.daysCol;
        }

        let lastRowCells = moTable.rows.item(6).cells.everyItem().getElements();
        for(let ri=0; ri < cols; ri++){
            lastRowCells[ri].appliedCellStyle = highlightDayCellStyle;
        } 

        for(let hi=0; hi < holidays[mo].length; hi++){
            let dt = holidays[mo][hi] + firstDayShift - 1;
            moTable.columns.item(Math.floor(dt/7)).cells.item(dt%7).appliedCellStyle = highlightDayCellStyle;
        }
    }

    updateTableColsRows(options.year_table, yearTable);
    // Doing merge here to avoid cell index recalculation while making the table 
    yearTable.rows.item(4).cells.item(0).merge(yearTable.rows.item(4).cells.item(4));
    let middleCell = yearTable.rows.item(4).cells.item(0);
    middleCell.appliedCellStyle = middleCellStyle;
    middleCell.contents = options.year.toString();

}


/****  Functions *****/

function getWeekDayNames(attr){
    let {locale, weekBeginsAtMonday, weekDayShrotness} = {...attr};
    let firstDayStr = weekBeginsAtMonday ? "01/01/1973" : "07/01/1973";
    var wkD = new Date(firstDayStr);
    var week = [];
    for( let i=0; i<7; i++){
        let wrd = wkD.toLocaleDateString(locale, { weekday: weekDayShrotness }); 
        wrd = wrd.charAt(0).toUpperCase() +  (wrd.length > 1? wrd.slice(1) : '');
        week.push(wrd);
        wkD.setDate(wkD.getDate() + 1);
    }
    return week;
}
function getMonthNames(attr){
    let d = new Date("01/01/1973");
    let months = [];
    for( let i=0; i<12; i++){
        months.push(d.toLocaleString(attr.locale, { month: 'long' }));
        d.setDate(d.getDate() + 30);
    }
    return months;
}

function updateTableColsRows(opt,tbl){
    let { colsW, rowsH, order: {cols, rows}} = opt;
    for(let col=0; col < cols.length; col++){
        if( cols[col] != '' ){
            tbl.columns.item(col).width = colsW[ cols[col] ];
        }
    }
    for(let row=0; row < rows.length; row++){
        if( rows[row] != '' ){
            tbl.rows.item(row).height = rowsH[ rows[row] ];
        }
    }
}

function getParam(obj, paramName, fallback){
    return (obj[paramName] == 'NOTHING') ? ((obj.basedOn) ? getParam(obj.basedOn, paramName, fallback) : fallback) : obj[paramName];
}

function measureColMinW(tblStyle, textLines, doc){
    let cellStyle = tblStyle.bodyRegionCellStyle;
    let fontSize = cellStyle.appliedParagraphStyle.pointSize;
    let maxLineLen = textLines.map(ln=>ln.length).reduce( (len1,len2) => Math.max(len1, len2),0);
    let rightInset = getParam(cellStyle, 'textRightInset', 0);
    let leftInset = getParam(cellStyle, 'textLeftInset', 0);

    let tbl = doc.tables.add({
        appliedTableStyle: tblStyle,
        bodyRowCount : textLines.length,
        columnCount : 1,
        contents: textLines,
        width: 2*maxLineLen*fontSize + rightInset + leftInset 
    });

    // everyItem () Returns every Cell in the collection
    // getElements () Resolves the object specifier, creating an array of object references.
    // so basically .everyItem().getElements() turns collection into an array
    // https://community.adobe.com/t5/indesign-discussions/adjust-column-width-in-tables/m-p/6631680

    let minColW = tbl.columns.item(0).cells.everyItem().getElements()
        .flatMap(st=>st.lines.everyItem().getElements().map(ln => ln.endHorizontalOffset -ln.horizontalOffset))
        .reduce( (len1,len2) => Math.max(len1, len2),0);
    tbl.remove();
    return minColW  + rightInset + leftInset; 
}

function federalHolidaysYear(year){
    /* Month counts from 0, week counts from Sunday 0, week day number in the month also from 0 */
    /* "Last week day on the month" is the next month week day with num=-1 */  
    var holidays = getHolidaysFormula();

    var months = Array(12).fill(0).map(x=>[]);
    holidays.forEach(h=>{
        if (h.fixed){
            months[h.mo].push( h.date );
        }else {
            let dif = (7 + h.weekDay - new Date(year, h.mo, 0).getDay() ) % 7;
            let dt = new Date(year, h.mo, dif + 7*h.num);
            months[ dt.getMonth() ].push( dt.getDate() );
        }
    });
    return months;
}

function getHolidaysFormula(){
    return  readJsonFile("holidays_formula\\federal_USA.json");
}

function alert(msg) {
    let theDialog = app.dialogs.add();
    let col = theDialog.dialogColumns.add();
    let colText = col.staticTexts.add();
    colText.staticLabel = "" + msg;
    theDialog.canCancel = false;
    theDialog.show();
    theDialog.destroy();
    return;
}