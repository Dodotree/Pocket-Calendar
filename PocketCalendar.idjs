//An InDesign UXPScript


var myDocument = app.documents.add()
myDocument.name = "Pocket Calendar 2023"
myDocument.viewPreferences.horizontalMeasurementUnits = MeasurementUnits.POINTS
myDocument.viewPreferences.verticalMeasurementUnits = MeasurementUnits.POINTS
myDocument.documentPreferences.properties = {pageWidth: 1000, pageHeight: 1800}
myDocument.colors.add({name:"Red", model: ColorModel.process, colorValue:[0,90,53,0]});

var options = {
  locale: 'en-US', /* default */
  weekBeginsAnMonday: true,
  year: 1989,
  year_table: {
    border: "4px",
    colsW: { week : 55.5, mo: "252pt"},
    rowsH: { moName: "48pt", mo: "236pt", mid:"156pt"},
    order: {
      cols:["week", "mo", "mo", "mo", "week"],
      rows: ["moName", "mo", "moName", "mo", "mid", "moName", "mo", "moName", "mo"]
    }
  },
}

var dayFontStyle = myDocument.paragraphStyles.add({
  name:"Day Font",
  appliedFont: "Neue Haas Unica W1G",
  fontStyle: "Medium",
  pointSize: 31, /* leading 36 */
  justification: Justification.RIGHT_ALIGN
});

var weekFontStyle = myDocument.paragraphStyles.add({
  name:"Week Font",
  appliedFont: "Neue Haas Unica W1G",
  fontStyle: "Bold",
  pointSize: 31,
  justification: Justification.LEFT_ALIGN
});

var monthFontStyle = myDocument.paragraphStyles.add({
  name:"Month Font",
  appliedFont: "Neue Haas Unica W1G",
  fontStyle: "Bold",
  pointSize: 30,
  kerningMethod: "Optical",
  tracking: 50,
  justification: Justification.CENTER_ALIGN,
});

var yearFontStyle = myDocument.paragraphStyles.add({
  name:"Year Font",
  appliedFont: "Gravitas One",
  pointSize: 162,
  leading: 132,
  kerningMethod: "Optical",
  tracking: -70,
  fillColor: myDocument.colors.item("Red"),
  justification: Justification.LEFT_ALIGN,
});

var dayHighlightFontStyle = myDocument.paragraphStyles.add({
  name:"Day Red Font",
  basedOn: dayFontStyle,
  fillColor: myDocument.colors.item("Red"),
});

var dayCellStyle = myDocument.cellStyles.add({
  name:"Day Cell",
  appliedParagraphStyle: dayFontStyle,
  textTopInset: "1px",
  textRightInset: "4pt",
  textBottomInset: "7pt",
  textLeftInset: "5pt",
  verticalJustification: VerticalJustification.CENTER_ALIGN
})

var highlightDayCellStyle = myDocument.cellStyles.add({
  name:"Highlight Day Cell",
  appliedParagraphStyle: dayHighlightFontStyle,
})

var weekDayCellStyle = myDocument.cellStyles.add({
  name:"Week Day Names Cell",
  basedOn: dayCellStyle,
  appliedParagraphStyle: weekFontStyle,
  textTopInset: "4px",
  textBottomInset: "4pt",
})

var yearCellStyle = myDocument.cellStyles.add({
  name:"Year Cell",
  basedOn: dayCellStyle,
  appliedParagraphStyle: monthFontStyle,
  textTopInset: 0,
  textRightInset: 0,
  textBottomInset: 0,
})

var monthNameCellStyle = myDocument.cellStyles.add({
  name:"Month Name Cell",
  basedOn: yearCellStyle,
  appliedParagraphStyle: monthFontStyle,
})

var monthCellStyle = myDocument.cellStyles.add({
  name:"Month Cell",
  basedOn: yearCellStyle,
  textTopInset: "8px",
})

var middleCellStyle = myDocument.cellStyles.add({
  name:"Middle Cell",
  basedOn: yearCellStyle,
  appliedParagraphStyle: yearFontStyle,
  firstBaselineOffset: FirstBaseline.LEADING_OFFSET,
  verticalJustification: VerticalJustification.JUSTIFY_ALIGN
})

var weekCellStyle = myDocument.cellStyles.add({
  name:"Week Cell",
  basedOn: yearCellStyle,
})

var moTableStyle = myDocument.tableStyles.add({
  name:"Month Table Style",
  bodyRegionCellStyle: dayCellStyle,
  spaceBefore: 0,
  spaceAfter: 0,
  leftBorderStrokeWeight: 0,
  topBorderStrokeWeight: 0,
  rightBorderStrokeWeight: 0,
  bottomBorderStrokeWeight: 0,
  startColumnStrokeCount: 1,
  endColumnStrokeCount: 1,
  startRowStrokeRow: 1,
  endRowStrokeCount: 1,
  startColumnStrokeWeight:0,
  endColumnStrokeWeight:0,
  startRowStrokeWeight:0,
  endRowStrokeWeight:0,
})

var weekTableStyle = myDocument.tableStyles.add({
  name:"Week Table Style",
  basedOn: moTableStyle,
  bodyRegionCellStyle: weekDayCellStyle,
})

let bw = options.year_table.border
var yearTableStyle = myDocument.tableStyles.add({
  name:"Year Table Style",
  bodyRegionCellStyle: yearCellStyle,
  spaceBefore: 0,
  spaceAfter: 0,
  leftBorderStrokeWeight: bw,
  topBorderStrokeWeight: bw,
  rightBorderStrokeWeight: bw,
  bottomBorderStrokeWeight: bw,
  startColumnStrokeCount: 1,
  endColumnStrokeCount: 1,
  startRowStrokeRow: 1,
  endRowStrokeCount: 1,
  startColumnStrokeWeight: bw,
  endColumnStrokeWeight: bw, 
  startRowStrokeWeight: bw, 
  endRowStrokeWeight: bw,
})

/***** Structural part (mostly) *****/
var myTextFrame = myDocument.pages.item(0).textFrames.add({geometricBounds: ["36pt", "36pt", "1400pt", "940pt"]});

var yearTable = myTextFrame.insertionPoints.item(-1).tables.add({
  appliedTableStyle: yearTableStyle,
  bodyRowCount : 9,
  columnCount : 5
});

let weekList = getShortWeekDayNames(options.locale, options.weekBeginsAnMonday);
let weekW = measureColMinW(weekTableStyle, weekList, yearTable.cells.item(0));
options.year_table.colsW.week = (options.year_table.colsW.week < weekW) ? weekW : options.year_table.colsW.week


let numW = measureColMinW(moTableStyle, ['1','2','3','4','5','6','7','8','9','0'], yearTable.cells.item(0));
let num2W = measureColMinW(moTableStyle, ['24', '30'], yearTable.cells.item(0));
options.daysNarrowCol = numW
options.daysCol = num2W;

[0,4].forEach((col)=>{
  [1,3,6,8].forEach((row)=>{
    let weekCell = yearTable.columns.item(col).cells.item(row)
    weekCell.appliedCellStyle = weekCellStyle
    let weekTbl = weekCell.tables.add({
      appliedTableStyle: weekTableStyle,
      bodyRowCount : 7,
      columnCount : 1,
      contents: weekList,
      width: weekW,
    });
    weekTbl.rows.item(6).cells.item(0).texts.item(0).fillColor = myDocument.colors.item("Red")
  })
})

var d= new Date(options.year, 0, 1)
var year = d. getFullYear()

while (year == d.getFullYear()) {
  let mo = d.getMonth()
  let moName = d.toLocaleString(options.locale, { month: 'long' })

  let yearTableCol = mo%3 + 1
  let yearTableRow = Math.floor(mo/3)
  yearTableRow = (yearTableRow < 2) ? 2*yearTableRow : 2*yearTableRow + 1

  let firstDayShift = d.getDay() - 1
  let days = [];
  while (mo==d.getMonth()) {
    let dt = d.getDate()
    days[d.getDay()+ 7*Math.floor((dt+firstDayShift)/7)] = dt
    d.setDate(dt + 1)
  }

  if( options.weekBeginsAnMonday ){
    days.shift()
    if(2 === days[0]){
      days = [0,0,0,0,0,0,1, ...days]
      firstDayShift = 6
    }
  }

  let cols = Math.ceil(days.length/7)
  let daysStr = []
  for(let i=0; i < 7*cols; i++) {
      let ind = cols*(i%7) + Math.floor(i/7)
      daysStr[ind] = days[i] ? days[i].toString() : ''
  }

  let monthNameCell = yearTable.rows.item(yearTableRow).cells.item(yearTableCol)
  monthNameCell.contents = moName.toLocaleUpperCase()
  monthNameCell.appliedCellStyle = monthNameCellStyle

  // initial column will be even portion from table width
  // each time you decrease column width it will decrease table width
  // => start with maximum width for each column
  let tblW = ((cols<6)? 5*options.daysCol : 6* options.daysCol);

  let monthCell = yearTable.rows.item(yearTableRow +1).cells.item(yearTableCol)
  monthCell.appliedCellStyle = monthCellStyle
  let moTable = monthCell.tables.add({
          appliedTableStyle: moTableStyle,
          bodyRowCount : 7,
          columnCount : cols,
          contents : daysStr,
          width: tblW,
      });

  moTable.columns.item(0).width = options.daysNarrowCol;
  if(firstDayShift > 4){
    moTable.columns.item(1).width = options.daysNarrowCol;
  }else{
    moTable.columns.item(1).width = options.daysCol;
  }

  let lastRowCells = moTable.rows.item(6).cells.everyItem().getElements()
  for(let ri=0; ri < cols; ri++){
    lastRowCells[ri].appliedCellStyle = highlightDayCellStyle
  } 
}

updateTableColsRows(options.year_table, yearTable)
// Doing merge here to avoid cell index recalculation while making the table 
yearTable.rows.item(4).cells.item(0).merge(yearTable.rows.item(4).cells.item(4))
let middleCell = yearTable.rows.item(4).cells.item(0)
middleCell.appliedCellStyle = middleCellStyle
middleCell.contents = options.year.toString()

/* Functions */

function getShortWeekDayNames(loc, mondayFirstBool ){
  let firstDayStr = mondayFirstBool ? "01/01/1973" : "07/01/1973"
  var wkD = new Date(firstDayStr)
  var week = []
  for( let i=0; i<7; i++){
    let wrd = wkD.toLocaleDateString(loc, { weekday: 'short' }) // narrow, sort, long
    wrd = wrd.charAt(0).toUpperCase() +  (wrd.length > 1? wrd.slice(1) : '')
    week.push(wrd)
    wkD.setDate(wkD.getDate() + 1)
  }
  return week
}

function updateTableColsRows(opt,tbl){
  let { colsW, rowsH, order: {cols, rows}} = opt
  for(let col=0; col < cols.length; col++){
    if( cols[col] != '' ){
      tbl.columns.item(col).width = colsW[ cols[col] ]
    }
  }
  for(let row=0; row < rows.length; row++){
    if( rows[row] != '' ){
      tbl.rows.item(row).height = rowsH[ rows[row] ]
    }
  }
}

function getParam(obj, paramName, fallback){
  return (obj[paramName] == 'NOTHING') ? ((obj.basedOn) ? getParam(obj.basedOn, paramName, fallback) : fallback) : obj[paramName]
}

function measureColMinW(tblStyle, textLines, doc){
    let cellStyle = tblStyle.bodyRegionCellStyle
    let fontSize = cellStyle.appliedParagraphStyle.pointSize
    let maxLineLen = textLines.map(ln=>ln.length).reduce( (len1,len2) => Math.max(len1, len2),0)
    let rightInset = getParam(cellStyle, 'textRightInset', 0)
    let leftInset = getParam(cellStyle, 'textLeftInset', 0)

    let tbl = doc.tables.add({
      appliedTableStyle: tblStyle,
      bodyRowCount : textLines.length,
      columnCount : 1,
      contents: textLines,
      width: 2*maxLineLen*fontSize + rightInset + leftInset 
    });

    // everyItem () Returns every Cell in the collection
    // getElements () Resolves the object specifier, creating an array of object references.
    // so basically .everyItem().getElements() turns collection into an array
    // https://community.adobe.com/t5/indesign-discussions/adjust-column-width-in-tables/m-p/6631680

    let minColW = tbl.columns.item(0).cells.everyItem().getElements()
                .flatMap(st=>st.lines.everyItem().getElements().map(ln => ln.endHorizontalOffset -ln.horizontalOffset))
                .reduce( (len1,len2) => Math.max(len1, len2),0)
    tbl.remove()
  return minColW  + rightInset + leftInset 
}

function alert(msg) {
  let theDialog = app.dialogs.add();
  let col = theDialog.dialogColumns.add();
  let colText = col.staticTexts.add();
  colText.staticLabel = "" + msg;
  theDialog.canCancel = false;
  theDialog.show();
  theDialog.destroy();
  return;
}